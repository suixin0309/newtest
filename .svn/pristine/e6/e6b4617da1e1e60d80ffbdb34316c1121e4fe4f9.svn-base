import axios from 'axios'
import store from '../store/store'
const SERVICE = {
  '': '',
  taobao: 'http://rap2api.taobao.org/app/mock/10580',
  service2: 'http://rap2api.taobao.org/app/mock/115893'
}

const requestType = {
  get: function(requestParams) {
    return {
      params: requestParams,
      method: 'get'
    }
  },

  post: function(requestBody) {
    return {
      data: requestBody,
      method: 'post',
      headers: {
        'content-type': 'application/json'
      }
    }
  },
  form: function(requestBody) {
    return {
      data: requestBody,
      method: 'post',
      headers: {
        'content-type': 'application/x-www-form-urlencoded'
      }
    }
  },
  file: function(requestBody) {
    return {
      data: requestBody,
      method: 'post',
      headers: {
        //'content-type': 'application/x-www-form-urlencoded'
      }
    }
  }
}

/*公共配置*/
let mainConfig = {
  timeout: 6000,
  //production需要修改为false
  withCredentials: false,
  // `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte
  validateStatus: function(status) {
    //需要考虑到304
    return status >= 200 && status < 400 // 默认的
  }
  /*proxy: {
    host: '127.0.0.1',
    port: 9000,
    auth: {
      username: 'mikeymike',
      password: 'rapunz3l'
    }
  }*/
}

export default {
  install(Vue, options) {
    Vue.prototype.$request = function({
      self,
      infoType,
      infoContent,
      url,
      params,
      serve,
      expand = {}
    }) {
      //如有全局请求或相应拦截需求，在这里添加处理方法
      // axios配置
      // axios.defaults.withCredentials = true; // 携带cookie
      // axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';
      axios.interceptors.request.use(
        function(config) {
          // 在发送请求之前做些什么
          store.commit('SET_MESSAGE', { isHas: false, false: 'info' })
          return config
        },
        function(error) {
          // 对请求错误做些什么
          self.$message.warn("客户端错误，请检查网络连接")
          return Promise.reject(error)
        }
      )

      axios.interceptors.response.use(
        function(response) {
          // 对响应数据做点什么
          console.log('响应拦截')
          //登陆状态，请求头里
          // if(response.data.info.seed){
          //   window.location.href='/login'
          // }
          return response.data
        },
        function(error) {
          // 对响应错误做点什么
          //请求超时，在这进行操作
          self.$message[infoType](infoContent)
          let errermsg = JSON.stringify(error)
          if (errermsg.indexOf('timeout')) {
            store.commit('SET_MESSAGE', { isHas: true, type: 'info' })
          }
          return Promise.reject(error)
        }
      )

      let baseUri = {
        url: SERVICE[serve] + url
      }

      return {
        get: function() {
          let req = requestType.get(params)
          let specific = Object.assign({}, baseUri, req, mainConfig, expand)
          return axios(specific).then(res => {
            return res && res
          })
        },
        post: function(
        ) {
          let req = requestType.post()
          let specific = Object.assign({}, baseUri, req, mainConfig, expand)
          return axios(specific).then(res => {
            return res && res
          })
        },
        form: function() {
          let req = requestType.form(params)
          let specific = Object.assign({}, baseUri, req, mainConfig, expand)
          return axios(specific).then(res => {
            return res && res
          })
        },
        file: function() {
          let req = requestType.post(params)
          let specific = Object.assign({}, baseUri, req, mainConfig, expand)
          return axios(specific).then(res => {
            return res && res
          })
        }
      }
    }
  }
}

//根据需求场景  设计
//get  post  form :{content-type,method:}  file
//content-type    在方法里做逻辑设置
//this.$request('url','form/get/post/file')
